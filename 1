static int fs_read(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *fi) {
    // function to read data from a file
    // this function is very similar to _extractFile, but uses the FUSE buffer to write the data to
    // see _extractFile for more detailed comments

    unsigned short block = USHRT_MAX;
    unsigned int bytesToWrite = 0;
    char* localpath = malloc(strlen(path));
    dirEntry* file = NULL;
    (void) fi;

    logMessage("Reading file %s\n", path);

    strcpy(localpath, path);
    file = findEntryFromPath(localpath, fuseRoot);

    if (file == NULL || file->attributes & ATTR_DIRECTORY) {
        free(localpath);
        return -ENOENT;
    }

    size = file->size;

    logMessage("Offset: %ld\n", offset);
    logMessage("Size: %ld\n", size);
    logMessage("File size: %d\n", file->size);

    if (offset > size) {
        free(localpath);
        return 0;
    }

    if (offset + size > size) {
        size = size - offset;
    }

    block = file->first_cluster_low;
    bytesToWrite = size;

    // loop through the blocks and write the data to the buffer
    while (bytesToWrite > 0) {
        unsigned int numBytes = (bytesToWrite > BLOCKSIZE) ? BLOCKSIZE : bytesToWrite;
        logMessage("\tReading %d bytes from block %d, offset %d\n", numBytes, block, offset);
        logMessage("\tBytes to write: %d\n", bytesToWrite);
        memcpy(buf, &blocks[block].data, numBytes);
        buf += numBytes;
        bytesToWrite -= numBytes;
        block = FAT[block];
    }

    free(localpath);

    return size;
}
